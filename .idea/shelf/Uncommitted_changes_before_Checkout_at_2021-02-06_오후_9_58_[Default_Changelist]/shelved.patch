Index: data/sample_text.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>이것도\r\n테스트를 위한\r\n문자열\r\n입니다\r\n확인용
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data/sample_text.txt	(revision 6cb3003abb1e2c51c941e2aabc029dfcde42a14b)
+++ data/sample_text.txt	(date 1612615343701)
@@ -1,5 +1,10 @@
 이것도
-테스트를 위한
+테스트를
+위한
 문자열
 입니다
-확인용
\ No newline at end of file
+확인용
+일이삼사오육칠팔구십
+이것도
+확인한번해볼수있을까요
+메롱메롱
\ No newline at end of file
Index: data/generate_dataset.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport argparse\r\nimport numpy as np\r\nimport os\r\nimport sys\r\n\r\nfrom PIL import ImageFont, ImageDraw, Image\r\nfrom pathlib import Path\r\n\r\n# a function to draw training images\r\ndef draw_image(textlist, TLGAN_save_path, CRNN_save_path):\r\n\r\n    # make sure that the save path exists\r\n    Path(TLGAN_save_path).mkdir(parents=True, exist_ok=True)\r\n    Path(CRNN_save_path).mkdir(parents=True, exist_ok=True)\r\n\r\n    full_img = np.zeros((0, 256, 3), dtype=np.uint8)\r\n    bounding_boxes = []\r\n    crnn_dataframe = {}\r\n\r\n    for text, i in zip(textlist, range(len(textlist))):\r\n\r\n        if len(text) <= 10:\r\n            img = np.zeros((60, 256, 3), dtype=np.uint8)\r\n            img_pil = Image.fromarray(img)\r\n            draw = ImageDraw.Draw(img_pil)\r\n            draw.text((30, 20), text, font=font, fill=(b, g, r))\r\n\r\n            #draw CRNN image\r\n            cv2.imwrite(os.path.join(CRNN_save_path, str(len(os.listdir(CRNN_save_path))) + \".jpg\"), np.array(img_pil))\r\n            crnn_dataframe.update({str(len(os.listdir(CRNN_save_path))-1) + \".jpg\": text})\r\n\r\n            full_img = np.concatenate([full_img, img_pil], axis=0)\r\n\r\n            xmin = 30\r\n            xmax = xmin + 20*len(text)\r\n            ymin = 20 + 60*i\r\n            ymax = ymin+20\r\n\r\n            bounding_boxes.append([xmin, xmax, ymin, ymax])\r\n        else:\r\n            full_img = np.concatenate([full_img, np.zeros((60, 256, 3))], axis=0)\r\n\r\n\r\n    # make sure that the images are in the same size\r\n    if len(textlist) < args.n_text:\r\n        full_img = np.concatenate([full_img, np.zeros((60*(args.n_text-len(textlist)), 256, 3),)], axis=0)\r\n\r\n    cv2.imwrite(os.path.join(TLGAN_save_path, str(len(os.listdir(TLGAN_save_path))) + \".jpg\"), full_img)\r\n\r\n    return {str(len(os.listdir(TLGAN_save_path))-1) + \".jpg\": bounding_boxes}, crnn_dataframe\r\n\r\n\r\ndef writeCSV(TLGAN_dataframe, CRNN_dataframe, TLGAN_csv_filename=\"TLGAN.csv\", CRNN_csv_filename=\"CRNN.csv\"):\r\n\r\n    with open(TLGAN_csv_filename, \"w\") as f:\r\n        for filename in TLGAN_dataframe.keys():\r\n            f.write(filename)\r\n            for bb in TLGAN_dataframe[filename]:\r\n                for axis in bb:\r\n                    f.write(\",\"+str(axis))\r\n            f.write(\"\\n\")\r\n\r\n    with open(CRNN_csv_filename, 'w', encoding=\"utf-8\") as f:\r\n        for filename in CRNN_dataframe.keys():\r\n            f.write(filename)\r\n            for label in CRNN_dataframe[filename]:\r\n                f.write(\",\"+str(label))\r\n            f.write(\"\\n\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    parser = argparse.ArgumentParser(description=\"Convert text to image file\")\r\n    parser.add_argument(\"--text_file_path\", type=str, default=\"./\")\r\n    parser.add_argument(\"--text_file_name\", type=str, default=\"sample_text.txt\")\r\n    parser.add_argument(\"--TLGAN_save_path\", type=str, default=\"./images/TLGAN\")\r\n    parser.add_argument(\"--CRNN_save_path\", type=str, default=\"./images/CRNN\")\r\n    parser.add_argument(\"--n_text\", type=int, default=4)\r\n\r\n    args = parser.parse_args()\r\n    n_text = args.n_text\r\n\r\n    tlgan_csv = {}\r\n    crnn_csv = {}\r\n\r\n    with open(os.path.join(args.text_file_path, args.text_file_name), 'r', encoding=\"utf-8\") as textFile:\r\n        lines = textFile.read().split(\"\\n\")\r\n\r\n        b, g, r = 255, 255, 255\r\n        fontpath = \"fonts/H2GTRM.TTF\"\r\n        font = ImageFont.truetype(fontpath, 20)\r\n\r\n        if len(lines) <= n_text:\r\n            tlgan, crnn = draw_image(lines, args.TLGAN_save_path, args.CRNN_save_path)\r\n            tlgan_csv.update(tlgan)\r\n            crnn_csv.update(crnn)\r\n\r\n        else:\r\n            for i in range(0, len(lines), n_text):\r\n\r\n                if i+n_text >= len(lines):\r\n                    tlgan, crnn = draw_image(lines[i:], args.TLGAN_save_path, args.CRNN_save_path)\r\n                    tlgan_csv.update(tlgan)\r\n                    crnn_csv.update(crnn)\r\n\r\n                else:\r\n                    tlgan, crnn = draw_image(lines[i:i+n_text], args.TLGAN_save_path, args.CRNN_save_path)\r\n                    tlgan_csv.update(tlgan)\r\n                    crnn_csv.update(crnn)\r\n    writeCSV(tlgan_csv, crnn_csv)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data/generate_dataset.py	(revision 6cb3003abb1e2c51c941e2aabc029dfcde42a14b)
+++ data/generate_dataset.py	(date 1612615343693)
@@ -26,7 +26,7 @@
             draw = ImageDraw.Draw(img_pil)
             draw.text((30, 20), text, font=font, fill=(b, g, r))
 
-            #draw CRNN image
+            # draw CRNN image
             cv2.imwrite(os.path.join(CRNN_save_path, str(len(os.listdir(CRNN_save_path))) + ".jpg"), np.array(img_pil))
             crnn_dataframe.update({str(len(os.listdir(CRNN_save_path))-1) + ".jpg": text})
 
@@ -41,7 +41,6 @@
         else:
             full_img = np.concatenate([full_img, np.zeros((60, 256, 3))], axis=0)
 
-
     # make sure that the images are in the same size
     if len(textlist) < args.n_text:
         full_img = np.concatenate([full_img, np.zeros((60*(args.n_text-len(textlist)), 256, 3),)], axis=0)
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\ndata/TLGAN.csv\r\ndata/images
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision 6cb3003abb1e2c51c941e2aabc029dfcde42a14b)
+++ .gitignore	(date 1612615542368)
@@ -1,3 +1,6 @@
 
 data/TLGAN.csv
-data/images
\ No newline at end of file
+data/images
+data/CRNN.csv
+data/sample_text.txt
+
